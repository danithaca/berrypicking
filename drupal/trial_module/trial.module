<?php

// in order to try out ajax_wizard_form().
include_once(drupal_get_path('module', 'ajax_example') .'/ajax_example_graceful_degradation.inc');

function trial_menu() {
  $items = array(
    'trial' => array(
      'title' => 'Test page',
      'description' => 'Test Handler.',
      'page callback' => 'trial_test',
      //'page arguments' => array(''),
      'access callback' => TRUE,
      //'access arguments' => array('administer mturk'),
      'type' => MENU_CALLBACK,
    ),
  );

  $items['modal_test'] = array(
    'title' => 'Modal test',
    'access callback' => TRUE,
    'page callback' => 'modal_test_page',
  );

  $items['modal_test/form/%ctools_js'] = array(
    'title' => 'modal test dialog',
    'access callback' => TRUE,
    'page callback' => 'modal_test',
    'page arguments' => array(2),
    'type' => MENU_CALLBACK,
  );

  $items['simple_form'] = array(
    'title' => 'Simple Form Test',
    'access callback' => TRUE,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('trial_simple_form'),
    'type' => MENU_CALLBACK,
  );

  return $items;
}


function trial_simple_form($form, &$form_states) {
  $form += array(
    'message' => array(
      '#type' => 'textfield',
      '#title' => 'Message',
      '#required' => TRUE,
    ),
    'submit' => array(
      '#type' => 'submit',
      '#value' => 'Submit',
    ),
  );
  return $form;
}

function trial_simple_form_validate($form, &$form_states) {
  if ($form_states['values']['message'] == 'shit') {
    form_set_error('message', 'You cannot say that!');
  }
}


function trial_simple_form_submit($form, &$form_states) {
  drupal_set_message($form_states['values']['message']);
}


function trial_clientside_validation_rule_alter(&$js_rules, $element, $context) {
  //dpm(func_get_args());
  //dpm($js_rules, 'js_rules');
  //dpm($element, 'element');
  //dpm($context, 'context');
  //switch($context['type']) {
    //case 'form_validation':
      //if (in_array('trial_simple_form_validate', $context['functions'])) {
        $js_rules['message']['taboo'] = 'shit';
        $js_rules['message']['messages']['taboo'] = 'You cannot say that!';
      //}
      //break;
  //}
  //dpm($js_rules, 'js_rules_after');
}


function modal_test_page() {
//  ctools_include('ajax'); // Module  include the dependence it needs for ajax.
//  ctools_include('modal');
//  ctools_modal_add_js();

  $output = ctools_modal_text_button(t('Click Here'), 'modal_test/form/nojs', t('Pop me up'));
  return $output;
}

function modal_test($js) {
  ctools_include('ajax');
  ctools_include('modal');
  ctools_modal_add_js();

  $form_state = array(
    'ajax' => TRUE,
  );

  $output = ctools_modal_form_wrapper('modal_test_form', $form_state);

  if (!empty($form_state['executed'])) {
    $output = array();
    ctools_add_js('ajax-responder');
    //$output[] = ctools_modal_command_dismiss(t('Probe successful'));
    if (isset($_GET['destination'])) {
      $output[] = ctools_ajax_command_redirect($_GET['destination']);
    } else {
      // the following command force reload the current page. let's not do it.
      //$output[] = ctools_ajax_command_reload();
      $output[] = ctools_ajax_command_redirect($form_state['redirect']);
    }
  }

  print ajax_render($output);
  ajax_footer();
}

function modal_test_form($form, $form_state) {
  $form['text'] = array(
    '#type' => 'textfield',
    '#title' => t('Text'),
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Submit'),
  );

  return $form;
}

function modal_test_form_submit(&$form, &$form_state) {
  $message = $form_state['values']['text'];
  drupal_set_message($message);
  $form_state['redirect'] = '<front>';
}


function trial_test() {
  //return _trial_test_form_slider();
  //return _trial_test_entity_creation();
  return _trial_test_multistep_form();
}

function _trial_test_multistep_form() {
  return array(
    'multistep_form' =>  drupal_get_form('ajax_example_wizard'),
    'extra_stuff' => array(
      '#markup' => '<p>Hello, World</p>',
    ),
  );
}

function _trial_test_entity_creation() {
  $entity = entity_property_values_create_entity('node', array(
    'type' => 'article',
    'language' => LANGUAGE_NONE,
    'title' => 'Created from entity_property_values_create_entity',
    'uid' => 1,
    'status' => 1,
    'created' => time(),
    'updated' => time(),
    'body' => array('value' => 'hello, world'),
  ));
  $entity->save();
  return 'Done';
}

function _trial_test_form_slider() {
  $form = array();
  $form['description'] = array(
    '#type' => 'item',
    '#title' => t('Title'),
  );

  $form['Simple Slider'] = array(
    '#type' => 'fieldset',
    '#title' => t('Simple Slider')
  );

  $form['Simple Slider']['slider1'] = array(
    '#type' => 'slider',
    '#title' => 'Simple Slider',
    '#title2' => array(
      '#left' => 'LEFT',
      '#middle' => 'MIDDLE',
      '#right' => 'RIGHT',
    ),
    '#input_title' => t('Min'),
    '#input2_title' => t('Max'),
    /**
     * Boolean: When set to true, the handle will animate with the default duration.
     * String: The name of a speed, such as "fast" or "slow".
     * Number: The duration of the animation, in milliseconds.
     */
    '#animate' => 'fast',
    /**
     * Make the min value adjustable dynamically via another element
     * Type of the value CSS selector
     * like .myfield, #element_id
     */
    'adjust_field_min' => NULL,
    /**
     * Make the max value adjustable dynamically via another element
     * Type of the value CSS selector
     * like .myfield, #element_id
     */
    'adjust_field_max' => NULL,
    /**
     * Disables the slider if set to true.
     */
    '#disabled' => FALSE,
    /**
     * The maximum value of the slider.
     */
    '#max' => 100,
    /**
     * The minimum value of the slider.
     */
    '#min' => 0,
    /**
     * Determines whether the slider handles move horizontally (min on left, max on right)
     * or vertically (min on bottom, max on top). Possible values: "horizontal", "vertical".
     */
    '#orientation' => 'horizontal',
    /**
     * Whether the slider represents a range.
     * Multiple types supported:
     *   Boolean: If set to true, the slider will detect if you have two handles and create a stylable range element between these two.
     *   String: Either "min" or "max". A min range goes from the slider min to one handle. A max range goes from one handle to the slider max.
     */
    '#range' => FALSE,
    /**
     * Determines the size or amount of each interval or step the slider takes between the min and max.
     * The full specified value range of the slider (max - min) should be evenly divisible by the step.
     */
    '#step' => 1,
    /**
     * Determines the value of the slider, if there's only one handle.
     * If there is more than one handle, determines the value of the first handle.
     * Or an array of values can be passed array('value'=>1 , 'value2'=> 2) ,
     * the order of values is important
     */
    //'#value' => 0,
    '#default_value' => 40,
    /**
     * Some default color styles for ease of use
     * red, green, blue
     */
    '#slider_style' => NULL,
    /**
     * Default size for input values
     */
    '#size' => 3,
    /**
     * If set to FALSE will display inputs only when javascript is disabled
     */
    '#display_inputs' => TRUE,
    /**
     * If enabled display the current values of slider
     * as simple text
     */
    '#display_values' => FALSE,
    /**
     * Format of the displaied values
     * The usage is mostly for showing $,% or other signs near the value
     */
    '#display_values_format' => '%{value}%',
    /**
     * Acceptable types are the same as css with and height and it will be used as width
     * or height depending on #orientation
     */
    '#slider_length' => NULL,
    /**
     * Display the element inside a fieldset
     */
    '#display_inside_fieldset' => FALSE,
    /**
     * Sliders with the same group will be linked
     * The behavior of linked sliders depends on group_type parametr
     * group name can only contain letters, numbers and underscore
     */
    '#group' => NULL,
    /**
     * same : All sliders in the same group will have the same value.
     * lock : All sliders in the same group will move with the exact same amount
     * total : The total value of all sliders will be between min/max , incresing value of
     *         one slider decreases the rest of the sliders in the same group
     */
    '#group_type' => 'same',
    /**
     * When set to TRUE, other sliders in the same
     * group will change only if this slider changes
     * values : TRUE , FALSE
     */
    '#group_master' => FALSE,
    /**
     * Disable buildin range validation
     * useful when element is used as widget
     * for fields, since integer fields have range validation
     * values : TRUE , FALSE
     */
    '#validate_range' => TRUE
  );

  $form['footer'] = array(
    '#type' => 'item',
    '#title' => t('Footer'),
  );

  return drupal_render($form);
}


function trial_views_api() {
  return array(
    'api' => '3.0',
  );
}